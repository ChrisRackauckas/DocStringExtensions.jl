{
    "docs": [
        {
            "location": "/", 
            "text": "DocStringExtensions\n\n\n#\n\n\nDocStringExtensions\n \n \nModule\n.\n\n\nProvides extensions to the Julia docsystem.\n\n\nExports\n\n\n\n\nexports\n\n\nfields\n\n\nimports\n\n\nmethodlist\n\n\nsignatures\n\n\n\n\nImports\n\n\n\n\nBase\n\n\nCompat\n\n\nCore\n\n\n\n\n\n\nWarning\n\n\nThis package is currently in early development and should not be used not be used for anything other than entertainment at the moment.\n\n\nBoth the public interface and private internals are likely the change without notice.\n\n\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nDocStringExtensions.exports\n\n\nDocStringExtensions.fields\n\n\nDocStringExtensions.imports\n\n\nDocStringExtensions.methodlist\n\n\nDocStringExtensions.signatures\n\n\nDocStringExtensions.Abbreviation\n\n\nDocStringExtensions.MethodList\n\n\nDocStringExtensions.MethodSignatures\n\n\nDocStringExtensions.ModuleExports\n\n\nDocStringExtensions.ModuleImports\n\n\nDocStringExtensions.TypeFields\n\n\nDocStringExtensions.arguments\n\n\nDocStringExtensions.filtermethods\n\n\nDocStringExtensions.format\n\n\nDocStringExtensions.keywords\n\n\nDocStringExtensions.parsedocs\n\n\nDocStringExtensions.printmethod\n\n\n\n\n\n\nReference\n\n\n#\n\n\nDocStringExtensions.exports\n \n \nConstant\n.\n\n\nAn \nAbbreviation\n to include all the exported names of a module is a sorted list of \nDocumenter.jl\n-style \n@ref\n links.\n\n\n\n\nNote\n\n\nThe names are sorted alphabetically and ignore leading \n@\n characters so that macros are \nnot\n sorted before other names.\n\n\n\n\nExamples\n\n\nThe markdown text generated by the \nexports\n abbreviation looks similar to the following:\n\n\n# Exports\n\n  - [`bar`](@ref)\n  - [`@baz`](@ref)\n  - [`foo`](@ref)\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.fields\n \n \nConstant\n.\n\n\nAn \nAbbreviation\n to include the names of the fields of a type as well as any documentation that may be attached to the fields.\n\n\nExamples\n\n\nThe generated markdown text should look similar to to following example where a type has three fields (\nx\n, \ny\n, and \nz\n) and the last two have documentation attached.\n\n\n# Fields\n\n  - `x`\n\n  - `y`\n\n    Unlike the `x` field this field has been documented.\n\n  - `z`\n\n    Another documented field.\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.imports\n \n \nConstant\n.\n\n\nAn \nAbbreviation\n to include all the imported modules in a sorted list.\n\n\nExamples\n\n\nThe markdown text generated by the \nimports\n abbreviation looks similar to the following:\n\n\n# Imports\n\n  - Foo\n  - Bar\n  - Baz\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.methodlist\n \n \nConstant\n.\n\n\nAn \nAbbreviation\n for including a list of all the methods that match a documented \nMethod\n or \nFunction\n within the current module.\n\n\nExamples\n\n\nThe generated markdown text will look similar to the following example where a function \nf\n defines three different methods:\n\n\n# Methods\n\n  - ```\n    f(x) at f.jl:1\n    ```\n\n  - ```\n    f(x, y) at f.jl:1\n    ```\n\n  - ```\n    f(x, y, z) at f.jl:1\n    ```\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.signatures\n \n \nConstant\n.\n\n\nAn \nAbbreviation\n for including a simplified representation of all the method signatures that match the given docstring. See \nprintmethod\n for details on the simplifications that are applied.\n\n\nExamples\n\n\nThe generated markdown text will look similar to the following example where a function \nf\n defines three different methods:\n\n\n# Signatures\n\n```julia\nf(x, y; a, b...)\n```\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.arguments\n \n \nMethod\n.\n\n\nReturns the list of arguments for a particular method \nm\n.\n\n\nSignatures\n\n\narguments\n(\nm\n)\n\n\n\n\n\n\nExamples\n\n\nf\n(\nx\n;\n \na\n \n=\n \n1\n,\n \nb\n...\n)\n \n=\n \nx\n\n\nargs\n \n=\n \narguments\n(\nfirst\n(\nmethods\n(\nf\n)))\n\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.filtermethods\n \n \nMethod\n.\n\n\nGiven a callable object \nf\n and a signature \nsig\n collect, filter, and sort the matching methods. All methods not defined within \nmod\n are discarded. Sorting is based on file name and line number. When the \nexact\n keyword is set to \ntrue\n then only exact matching methods will be returned, not all subtypes as well.\n\n\nSignatures\n\n\nfiltermethods\n(\nf\n,\n \nsig\n,\n \nmod\n;\n \nexact\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.format\n \n \nMethod\n.\n\n\nExpand the \nAbbreviation\n \nabbr\n in the context of the \nDocStr\n \ndoc\n and write the resulting markdown-formatted text to the \nIOBuffer\n \nbuf\n.\n\n\nSignatures\n\n\nformat\n(\nabbr\n,\n \nbuf\n,\n \ndoc\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.keywords\n \n \nMethod\n.\n\n\nReturns the list of keywords for a particular method \nm\n of a function \nfunc\n.\n\n\nSignatures\n\n\nkeywords\n(\nfunc\n,\n \nm\n)\n\n\n\n\n\n\nExamples\n\n\nf\n(\nx\n;\n \na\n \n=\n \n1\n,\n \nb\n...\n)\n \n=\n \nx\n\n\nkws\n \n=\n \nkeywords\n(\nf\n,\n \nfirst\n(\nmethods\n(\nf\n)))\n\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.parsedocs\n \n \nMethod\n.\n\n\nParse all docstrings defined within a module \nmod\n.\n\n\nSignatures\n\n\nparsedocs\n(\nmod\n)\n\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.printmethod\n \n \nMethod\n.\n\n\nPrint a simplified representation of a method signature to \nbuffer\n.\n\n\nSignatures\n\n\nprintmethod\n(\nbuffer\n,\n \nbinding\n,\n \nfunc\n,\n \nmethod\n)\n\n\n\n\n\n\nSimplifications include:\n\n\n\n\nno \nTypeVar\ns;\n\n\nno types;\n\n\nno keyword default values;\n\n\n?\n printed where \n#unused#\n arguments are found.\n\n\n\n\nExamples\n\n\nf\n(\nx\n;\n \na\n \n=\n \n1\n,\n \nb\n...\n)\n \n=\n \nx\n\n\nsig\n \n=\n \nprintmethod\n(\nDocs\n.\nBinding\n(\nMain\n,\n \n:\nf\n),\n \nf\n,\n \nfirst\n(\nmethods\n(\nf\n)))\n\n\n\n\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.Abbreviation\n \n \nType\n.\n\n\nAbbreviation objects are used to automatically generate context-dependant markdown content within documentation strings. Objects of this type interpolated into docstrings will be expanded automatically before parsing the text to markdown.\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.MethodList\n \n \nType\n.\n\n\nThe singleton type for \nmethodlist\n abbreviations.\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.MethodSignatures\n \n \nType\n.\n\n\nThe singleton type for \nsignatures\n abbreviations.\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.ModuleExports\n \n \nType\n.\n\n\nThe singleton type for \nexports\n abbreviations.\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.ModuleImports\n \n \nType\n.\n\n\nThe singleton type for \nimports\n abbreviations.\n\n\nsource\n\n\n#\n\n\nDocStringExtensions.TypeFields\n \n \nType\n.\n\n\nThe singleton type for \nfields\n abbreviations.\n\n\nsource", 
            "title": "Home"
        }, 
        {
            "location": "/#docstringextensions", 
            "text": "#  DocStringExtensions     Module .  Provides extensions to the Julia docsystem.  Exports   exports  fields  imports  methodlist  signatures   Imports   Base  Compat  Core    Warning  This package is currently in early development and should not be used not be used for anything other than entertainment at the moment.  Both the public interface and private internals are likely the change without notice.   source", 
            "title": "DocStringExtensions"
        }, 
        {
            "location": "/#index", 
            "text": "DocStringExtensions.exports  DocStringExtensions.fields  DocStringExtensions.imports  DocStringExtensions.methodlist  DocStringExtensions.signatures  DocStringExtensions.Abbreviation  DocStringExtensions.MethodList  DocStringExtensions.MethodSignatures  DocStringExtensions.ModuleExports  DocStringExtensions.ModuleImports  DocStringExtensions.TypeFields  DocStringExtensions.arguments  DocStringExtensions.filtermethods  DocStringExtensions.format  DocStringExtensions.keywords  DocStringExtensions.parsedocs  DocStringExtensions.printmethod", 
            "title": "Index"
        }, 
        {
            "location": "/#reference", 
            "text": "#  DocStringExtensions.exports     Constant .  An  Abbreviation  to include all the exported names of a module is a sorted list of  Documenter.jl -style  @ref  links.   Note  The names are sorted alphabetically and ignore leading  @  characters so that macros are  not  sorted before other names.   Examples  The markdown text generated by the  exports  abbreviation looks similar to the following:  # Exports\n\n  - [`bar`](@ref)\n  - [`@baz`](@ref)\n  - [`foo`](@ref)  source  #  DocStringExtensions.fields     Constant .  An  Abbreviation  to include the names of the fields of a type as well as any documentation that may be attached to the fields.  Examples  The generated markdown text should look similar to to following example where a type has three fields ( x ,  y , and  z ) and the last two have documentation attached.  # Fields\n\n  - `x`\n\n  - `y`\n\n    Unlike the `x` field this field has been documented.\n\n  - `z`\n\n    Another documented field.  source  #  DocStringExtensions.imports     Constant .  An  Abbreviation  to include all the imported modules in a sorted list.  Examples  The markdown text generated by the  imports  abbreviation looks similar to the following:  # Imports\n\n  - Foo\n  - Bar\n  - Baz  source  #  DocStringExtensions.methodlist     Constant .  An  Abbreviation  for including a list of all the methods that match a documented  Method  or  Function  within the current module.  Examples  The generated markdown text will look similar to the following example where a function  f  defines three different methods:  # Methods\n\n  - ```\n    f(x) at f.jl:1\n    ```\n\n  - ```\n    f(x, y) at f.jl:1\n    ```\n\n  - ```\n    f(x, y, z) at f.jl:1\n    ```  source  #  DocStringExtensions.signatures     Constant .  An  Abbreviation  for including a simplified representation of all the method signatures that match the given docstring. See  printmethod  for details on the simplifications that are applied.  Examples  The generated markdown text will look similar to the following example where a function  f  defines three different methods:  # Signatures\n\n```julia\nf(x, y; a, b...)\n```  source  #  DocStringExtensions.arguments     Method .  Returns the list of arguments for a particular method  m .  Signatures  arguments ( m )   Examples  f ( x ;   a   =   1 ,   b ... )   =   x  args   =   arguments ( first ( methods ( f )))   source  #  DocStringExtensions.filtermethods     Method .  Given a callable object  f  and a signature  sig  collect, filter, and sort the matching methods. All methods not defined within  mod  are discarded. Sorting is based on file name and line number. When the  exact  keyword is set to  true  then only exact matching methods will be returned, not all subtypes as well.  Signatures  filtermethods ( f ,   sig ,   mod ;   exact )   source  #  DocStringExtensions.format     Method .  Expand the  Abbreviation   abbr  in the context of the  DocStr   doc  and write the resulting markdown-formatted text to the  IOBuffer   buf .  Signatures  format ( abbr ,   buf ,   doc )   source  #  DocStringExtensions.keywords     Method .  Returns the list of keywords for a particular method  m  of a function  func .  Signatures  keywords ( func ,   m )   Examples  f ( x ;   a   =   1 ,   b ... )   =   x  kws   =   keywords ( f ,   first ( methods ( f )))   source  #  DocStringExtensions.parsedocs     Method .  Parse all docstrings defined within a module  mod .  Signatures  parsedocs ( mod )   source  #  DocStringExtensions.printmethod     Method .  Print a simplified representation of a method signature to  buffer .  Signatures  printmethod ( buffer ,   binding ,   func ,   method )   Simplifications include:   no  TypeVar s;  no types;  no keyword default values;  ?  printed where  #unused#  arguments are found.   Examples  f ( x ;   a   =   1 ,   b ... )   =   x  sig   =   printmethod ( Docs . Binding ( Main ,   : f ),   f ,   first ( methods ( f )))   source  #  DocStringExtensions.Abbreviation     Type .  Abbreviation objects are used to automatically generate context-dependant markdown content within documentation strings. Objects of this type interpolated into docstrings will be expanded automatically before parsing the text to markdown.  source  #  DocStringExtensions.MethodList     Type .  The singleton type for  methodlist  abbreviations.  source  #  DocStringExtensions.MethodSignatures     Type .  The singleton type for  signatures  abbreviations.  source  #  DocStringExtensions.ModuleExports     Type .  The singleton type for  exports  abbreviations.  source  #  DocStringExtensions.ModuleImports     Type .  The singleton type for  imports  abbreviations.  source  #  DocStringExtensions.TypeFields     Type .  The singleton type for  fields  abbreviations.  source", 
            "title": "Reference"
        }
    ]
}